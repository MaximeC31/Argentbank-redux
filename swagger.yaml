swagger: '2.0'
info:
  title: Bank Argent API documentation
  description:
    Contains all available API endpoints in this codebase, including user management and transaction
    management.
  version: '1.1.0'
  termsOfService: 'http://swagger.io/terms/'
host: localhost:3001
basePath: /api/v1
schemes:
  - http

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description:
      'JWT Authorization header using the Bearer scheme. Example: "Authorization: Bearer {token}"'

paths:
  /user/login:
    post:
      tags:
        - User Module
      summary: Login
      description: API for user Login. Authenticates the user and returns a JWT token.
      parameters:
        - in: body
          name: body
          description: Login Payload with user credentials.
          required: true
          schema:
            $ref: '#/definitions/Login'
      produces:
        - application/json
      responses:
        '200':
          description: Login Successfully. Returns authentication token.
          schema:
            $ref: '#/definitions/LoginSuccessResponse'
        '400':
          description: Invalid Fields or Bad Request (e.g., missing email/password).
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized (e.g., incorrect credentials).
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /user/signup:
    post:
      tags:
        - User Module
      summary: Signup
      description: API for User Signup. Creates a new user profile.
      parameters:
        - in: body
          name: body
          description: Signup Payload with new user details.
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '200':
          description: Signup Successfully. Returns basic user info.
          schema:
            $ref: '#/definitions/ApiResponseUserProfile'
        '400':
          description: Invalid Fields (e.g., email format, missing fields) or User already exists.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /user/profile:
    get:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: Get User Profile
      description:
        API for fetching the profile information of the currently logged-in user. Requires
        authentication token (Bearer Token in Authorization header).
      produces:
        - application/json
      responses:
        '200':
          description: User profile retrieved successfully.
          schema:
            $ref: '#/definitions/ApiResponseUserProfile'
        '401':
          description: Unauthorized. Invalid or missing token.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: User not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      security:
        - Bearer: []
      tags:
        - User Module
      summary: Update User Profile
      description:
        API for updating the profile information (first name, last name) of the currently logged-in
        user. Requires authentication token (Bearer Token in Authorization header).
      parameters:
        - in: body
          name: body
          description: Payload with attributes to update (firstName, lastName).
          required: true
          schema:
            $ref: '#/definitions/UserProfileUpdatePayload'
      produces:
        - application/json
      responses:
        '200':
          description: User profile updated successfully. Returns updated profile data.
          schema:
            $ref: '#/definitions/ApiResponseUserProfile'
        '400':
          description: Invalid Fields in payload (e.g., bad format, empty values).
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized. Invalid or missing token.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /user/transactions/summary:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Get All Transactions Grouped by Month (Optional Month Filter)
      description: |
        API for retrieving **all** transactions for the logged-in user across all their accounts, grouped by month.
        Requires authentication token (Bearer Token in Authorization header).
      parameters:
        - name: month
          in: query
          description:
            Optional. Filter transactions to only include those from the specified month (format
            YYYY-MM). If omitted, returns transactions grouped by all available months.
          required: false
          type: string
          pattern: '^\d{4}-\d{2}$'
      produces:
        - application/json
      responses:
        '200':
          description:
            All transactions retrieved successfully, grouped by month (YYYY-MM). If 'month'
            parameter was used, only that month's group is returned.
          schema:
            $ref: '#/definitions/ApiResponseMonthlyGroupedTransactions'
        '400':
          description: Bad Request. Invalid month format (must be YYYY-MM).
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized. Invalid or missing token.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: No transactions found for this user (or for the specified month if filtered).
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /user/accounts/{accountId}/transactions:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Get Transactions for a Specific Account
      description: |
        API for retrieving transactions for a specific `accountId` belonging to the logged-in user.
        Requires authentication token (Bearer Token in Authorization header).
      parameters:
        - name: accountId
          in: path
          description: The unique identifier of the account whose transactions are to be retrieved.
          required: true
          type: string
        - name: type
          in: query
          description:
            Filter transactions by type (e.g., 'Electronic Payment', 'Deposit'). Use GET
            /transactions/types to see available types.
          required: false
          type: string
      produces:
        - application/json
      responses:
        '200':
          description:
            Transactions for the specified account retrieved successfully (potentially filtered).
          schema:
            $ref: '#/definitions/ApiResponseTransactionList'
        '400':
          description:
            Bad Request. Invalid accountId format, invalid month format (must be YYYY-MM), or
            invalid type.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized. Invalid or missing token.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden. The user does not own this account.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description:
            Account not found OR No transactions found matching the criteria for this account.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /user/transactions:
    post:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Add New Transaction
      description: |
        API for **adding a new transaction** record. The target `accountId` must be specified in the request body and belong to the logged-in user.
        Requires authentication token (Bearer Token in Authorization header).
      parameters:
        - in: body
          name: body
          description:
            Payload containing the details of the new transaction to add, including the `accountId`.
          required: true
          schema:
            $ref: '#/definitions/TransactionCreatePayload'
      produces:
        - application/json
      responses:
        '201':
          description:
            Transaction created successfully. Returns the details of the newly created transaction
            including its ID.
          schema:
            $ref: '#/definitions/ApiResponseTransactionDetail'
          headers:
            Location:
              type: string
              description:
                URL of the newly created transaction resource (e.g.,
                /api/v1/user/transactions/{newTransactionId})
        '400':
          description:
            Bad Request. Invalid payload (missing fields, invalid data types, invalid accountId,
            etc.).
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized. Invalid or missing token.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description:
            Forbidden. User may not have permission to add transactions to the specified account
            (e.g., account doesn't belong to the user).
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Account specified in the payload not found.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /user/transactions/{transactionId}:
    get:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Get Transaction Details
      description: |
        API for retrieving the details of a specific transaction by its ID (`transactionId`).
        The transaction must belong to the logged-in user. Requires authentication token (Bearer Token in Authorization header).
      parameters:
        - name: transactionId
          in: path
          description: The unique identifier of the transaction to retrieve.
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description: Transaction details retrieved successfully.
          schema:
            $ref: '#/definitions/ApiResponseTransactionDetail'
        '401':
          description: Unauthorized. Invalid or missing token.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description:
            Forbidden. User does not have permission to view this transaction (e.g., belongs to
            another user).
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Transaction not found for the given ID.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error.
          schema:
            $ref: '#/definitions/ErrorResponse'
    put:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Update Transaction Information
      description: |
        API for **updating user-editable information** (like category or notes) associated with a specific transaction identified by `transactionId`.
        The transaction must belong to the logged-in user. This does **not** modify core transaction data like amount or date. Requires authentication token (Bearer Token in Authorization header).
      parameters:
        - name: transactionId
          in: path
          description: The unique identifier of the transaction to update.
          required: true
          type: string
        - in: body
          name: body
          description: Payload with the transaction information to update (e.g., category, notes).
          required: true
          schema:
            $ref: '#/definitions/TransactionUpdatePayload'
      produces:
        - application/json
      responses:
        '200':
          description:
            Transaction information updated successfully. Returns the updated transaction details.
          schema:
            $ref: '#/definitions/ApiResponseTransactionDetail'
        '400':
          description: Invalid Fields in payload (e.g., invalid category format).
          schema:
            $ref: '#/definitions/ErrorResponse'
        '401':
          description: Unauthorized. Invalid or missing token.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden. User does not have permission to modify this transaction.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Transaction not found for the given ID.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error.
          schema:
            $ref: '#/definitions/ErrorResponse'
    delete:
      security:
        - Bearer: []
      tags:
        - Transaction Module
      summary: Delete/Reset User Transaction Information
      description: |
        API for **deleting/resetting user-editable information** (like category or notes) associated with a specific transaction identified by `transactionId`.
        The transaction must belong to the logged-in user. This does **not** delete the transaction record itself from the bank's history. Requires authentication token (Bearer Token in Authorization header).
      parameters:
        - name: transactionId
          in: path
          description:
            The unique identifier of the transaction whose user information should be cleared/reset.
          required: true
          type: string
      produces:
        - application/json
      responses:
        '200':
          description:
            User-added transaction information deleted/reset successfully. Returns the transaction
            with cleared fields.
          schema:
            $ref: '#/definitions/ApiResponseTransactionDetail'
        '401':
          description: Unauthorized. Invalid or missing token.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '403':
          description: Forbidden. User does not have permission to modify this transaction.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '404':
          description: Transaction not found for the given ID.
          schema:
            $ref: '#/definitions/ErrorResponse'
        '500':
          description: Internal Server Error.
          schema:
            $ref: '#/definitions/ErrorResponse'

  /transactions/types:
    get:
      tags:
        - Transaction Module
      summary: Get Available Transaction Types
      description:
        API for retrieving a list of all possible transaction types used in the system (e.g., for
        filtering or categorization).
      produces:
        - application/json
      responses:
        '200':
          description: List of available transaction types retrieved successfully.
          schema:
            $ref: '#/definitions/ApiResponseTransactionTypes'
        '500':
          description: Internal Server Error (e.g., cannot connect to DB to fetch types).
          schema:
            $ref: '#/definitions/ErrorResponse'

definitions:
  User:
    type: object
    required:
      - email
      - password
      - firstName
      - lastName
    properties:
      email:
        type: string
        description: User's email address (unique identifier)
        example: tony@stark.com
      password:
        type: string
        description: User's password
        example: password123
      firstName:
        type: string
        description: User's first name
        example: Tony
      lastName:
        type: string
        description: User's last name
        example: Stark
  Login:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        description: User's email address for login
        example: tony@stark.com
      password:
        type: string
        description: User's password for login
        example: password123
  UserProfileUpdatePayload:
    type: object
    description: Payload for updating user's first and last name.
    required:
      - firstName
      - lastName
    properties:
      firstName:
        type: string
        description: User's updated first name
        example: Anthony
      lastName:
        type: string
        description: User's updated last name
        example: Stark

  Transaction:
    type: object
    required:
      - id
      - accountId
      - date
      - description
      - amount
      - balance
      - type
    properties:
      id:
        type: string
        description: Unique identifier for the transaction (`itemId`)
        example: tx_12345abc
      accountId:
        type: string
        description: Identifier for the account this transaction belongs to
        example: acc_checking_8349
      date:
        type: string
        format: date
        description: Date of the transaction (YYYY-MM-DD format)
        example: '2023-10-26'
      description:
        type: string
        description: Description of the transaction provided by the bank or user
        example: 'Coffee Shop Purchase'
      amount:
        type: number
        format: double
        description: Amount of the transaction (positive for credit, negative for debit)
        example: -5.75
      balance:
        type: number
        format: double
        description: Account balance *after* this transaction occurred
        example: 2077.04
      type:
        type: string
        description: Type of transaction (e.g., Electronic, Deposit, Withdrawal, Transfer)
        example: 'Electronic Payment'
      category:
        type: string
        description: User-assigned category (editable via PUT)
        example: 'Food & Dining'
      notes:
        type: string
        description: User notes for the transaction (editable via PUT/DELETE)
        example: 'Morning coffee'

  TransactionCreatePayload:
    type: object
    description: Payload for creating a new transaction record.
    required:
      - accountId
      - date
      - description
      - amount
      - type
    properties:
      accountId:
        type: string
        description:
          The ID of the account (belonging to the user) to which this transaction should be added.
        example: acc_checking_8349
      date:
        type: string
        format: date
        description: Date for the new transaction (YYYY-MM-DD format).
        example: '2023-10-27'
      description:
        type: string
        description: Description for the new transaction.
        example: 'Manual Entry - Reimbursement'
      amount:
        type: number
        format: double
        description: Amount of the new transaction (positive for credit, negative for debit).
        example: 50.00
      type:
        type: string
        description: Type of the new transaction (should match one from GET /transactions/types).
        example: 'Manual Entry'
      category:
        type: string
        description: Initial category assignment (optional).
        example: 'Income'
      notes:
        type: string
        description: Initial notes for the transaction (optional).
        example: 'Received payment from John Doe'

  TransactionUpdatePayload:
    type: object
    description: Fields that can be updated for a transaction by the user.
    properties:
      category:
        type: string
        description:
          The new category to assign. Sending null or empty string might clear it, depending on
          backend implementation.
      notes:
        type: string
        description: The new notes to add. Sending null or empty string might clear it.

  MonthlyTransactionGroup:
    type: object
    properties:
      month:
        type: string
        description: The month these transactions belong to (YYYY-MM)
        example: '2023-10'
      transactions:
        type: array
        description: List of transactions that occurred in this month across all accounts.
        items:
          $ref: '#/definitions/Transaction'

  ApiResponseBase:
    type: object
    properties:
      status:
        type: integer
        description: HTTP Status Code matching the response code.
        example: 200
      message:
        type: string
        description: Descriptive message about the response outcome.
        example: 'Operation successful'

  LoginSuccessResponse:
    allOf:
      - $ref: '#/definitions/ApiResponseBase'
      - type: object
        properties:
          body:
            type: object
            properties:
              token:
                type: string
                description: JWT authentication token for subsequent requests.
                example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

  ApiResponseUserProfile:
    allOf:
      - $ref: '#/definitions/ApiResponseBase'
      - type: object
        properties:
          body:
            type: object
            properties:
              id:
                type: string
                description: User's unique ID
                example: usr_abcdef123
              email:
                type: string
                description: User's email
                example: tony@stark.com
              firstName:
                type: string
                description: User's first name
                example: Tony
              lastName:
                type: string
                description: User's last name
                example: Stark

  ApiResponseMonthlyGroupedTransactions:
    allOf:
      - $ref: '#/definitions/ApiResponseBase'
      - type: object
        properties:
          body:
            type: array
            description:
              List of monthly transaction groups (each object contains month and its transactions).
            items:
              $ref: '#/definitions/MonthlyTransactionGroup'

  ApiResponseTransactionList:
    allOf:
      - $ref: '#/definitions/ApiResponseBase'
      - type: object
        properties:
          body:
            type: array
            description:
              List of transactions matching the request criteria for the specified account.
            items:
              $ref: '#/definitions/Transaction'

  ApiResponseTransactionDetail:
    allOf:
      - $ref: '#/definitions/ApiResponseBase'
      - type: object
        properties:
          body:
            $ref: '#/definitions/Transaction'

  ApiResponseTransactionTypes:
    allOf:
      - $ref: '#/definitions/ApiResponseBase'
      - type: object
        properties:
          body:
            type: array
            description: List of available transaction type strings.
            items:
              type: string
            example: ['Electronic Payment', 'Deposit', 'Withdrawal', 'Transfer', 'Manual Entry']

  ErrorResponse:
    type: object
    required:
      - status
      - message
    properties:
      status:
        type: integer
        description: HTTP Error Status Code (e.g., 400, 401, 403, 404, 500)
        example: 400
      message:
        type: string
        description: Description of the error
        example: 'Invalid Fields'
